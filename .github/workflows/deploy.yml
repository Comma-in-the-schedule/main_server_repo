name: Deploy to EC2 with Docker

on:
  push:
    branches:
      - CI-CD
  pull_request:
    branches:
      - feature

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Build with Gradle
        run: |
          chmod +x gradlew
          ./gradlew clean bootJar

      - name: Verify JAR file existence
        run: |
          ls -l build/libs/

      - name: Login to Docker Hub
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build and Push Docker Image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/myapp:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/myapp:latest

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Upload files to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: |
            docker-compose.yml
            Dockerfile
          target: "/home/ec2-user/myapp/"

      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script: |
            cd /home/ec2-user/myapp

            # GitHub Secrets에서 `application.yaml`을 가져와 저장
            echo "${{ secrets.APPLICATION_YAML }}" | base64 --decode > config/application.yaml
            
            # .env 파일 생성
            cat <<EOF > .env
            MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}
            MYSQL_DATABASE=${{ secrets.MYSQL_DATABASE }}
            MYSQL_USER=${{ secrets.MYSQL_USER }}
            MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}
            EOF

            # 기존 컨테이너 중지 및 제거
            docker-compose down || true

            # 최신 Docker 이미지 가져오기
            docker pull ${{ secrets.DOCKER_USERNAME }}/myapp:latest

            # Docker Compose 실행 (환경 변수 파일 적용 및 `application.yaml` 마운트)
            docker-compose up -d --env-file .env
