name: Deploy Spring Boot and MySQL to Docker Hub

on:
  push:
    branches: [feature]
  pull_request:
    branches: [feature]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1️⃣ 코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v3

      # 2️⃣ JDK 설정 (Gradle 빌드용)
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # 3️⃣ Spring Boot 빌드 (Gradle)
      - name: Build Spring Boot application
        run: |
          ./gradlew clean build --no-daemon --stacktrace

      # 4️⃣ Docker 로그인 (Docker Hub)
      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      # 5️⃣ Docker 이미지 빌드 & 태깅 (Spring Boot)
      - name: Build and Tag Spring Boot Docker Image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/spring-boot-app:${{ github.sha }} .
          docker tag ${{ secrets.DOCKER_USERNAME }}/spring-boot-app:${{ github.sha }} ${{ secrets.DOCKER_USERNAME }}/spring-boot-app:latest

      # 6️⃣ Docker 이미지 빌드 & 태깅 (MySQL)
      - name: Build and Tag MySQL Docker Image
        run: |
          docker pull mysql:8.0
          docker tag mysql:8.0 ${{ secrets.DOCKER_USERNAME }}/mysql:latest

      # 7️⃣ Docker Hub에 Spring Boot & MySQL 이미지 푸시
      - name: Push Docker Images to Docker Hub
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/spring-boot-app:${{ github.sha }}
          docker push ${{ secrets.DOCKER_USERNAME }}/spring-boot-app:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/mysql:latest

      # 8️⃣ 원격 서버에서 컨테이너 실행 (SSH)
      - name: Deploy to Remote Server
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.VM_HOST }}
          username: ${{ secrets.VM_USER }}
          key: ${{ secrets.VM_SSH_PRIVATE_KEY }}
          script: |
            echo "🚀 배포 시작..."
            
            # 기존 컨테이너 중지 & 삭제
            sudo docker stop spring-boot-app mysql-db || true
            sudo docker rm -f spring-boot-app mysql-db || true
            
            # 최신 이미지 가져오기
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/spring-boot-app:latest
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/mysql:latest
            
            # 네트워크가 없을 경우에만 생성
            if ! sudo docker network ls | grep -q "my-network"; then
            sudo docker network create my-network
            fi
  
  
            # MySQL 컨테이너 실행
            sudo docker run -d --name mysql-db \
              --network my-network \
              -e MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_PASSWORD }} \
              -e MYSQL_DATABASE=${{ secrets.MYSQL_DATABASE }} \
              -p 3306:3306 \
              --restart always \
              ${{ secrets.DOCKER_USERNAME }}/mysql:latest
            
            # Spring Boot 컨테이너 실행
            sudo docker run -d --name spring-boot-app \
              --network my-network \
              -e SPRING_DATASOURCE_URL=jdbc:mysql://mysql-db:3306/${{ secrets.MYSQL_DATABASE }} \
              -e SPRING_DATASOURCE_USERNAME=root \
              -e SPRING_DATASOURCE_PASSWORD=${{ secrets.MYSQL_PASSWORD }} \
              -e JWT_SECRET=${{ secrets.JWT_SECRET }} \
              -e MAIL_HOST=${{ secrets.MAIL_HOST }} \
              -e MAIL_USERNAME=${{ secrets.MAIL_USERNAME }} \
              -e MAIL_PASSWORD=${{ secrets.MAIL_PASSWORD }} \
              
              -p 8080:8080 \
              --restart always \
              ${{ secrets.DOCKER_USERNAME }}/spring-boot-app:latest