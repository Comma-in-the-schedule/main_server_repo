name: Deploy Spring Boot with Docker Compose

on:
  push:
    branches: [feature]
  pull_request:
    branches: [feature]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1️⃣ 코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v3

      # 2️⃣ Docker 미러 설정 (속도 개선)
      - name: Configure Docker Daemon for Mirror
        run: |
          sudo mkdir -p /etc/docker
          echo '{
            "registry-mirrors": [
              "https://mirror.gcr.io",
              "https://hub-mirror.c.163.com"
            ]
          }' | sudo tee /etc/docker/daemon.json
          sudo systemctl restart docker

      # 3️⃣ JDK 설정 (Gradle 빌드용)
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # 4️⃣ Docker 이미지 미리 다운로드
      - name: Manually Pull Docker Image
        run: |
          docker pull eclipse-temurin:17-jre-alpine || docker pull amazoncorretto:17-alpine

      # 5️⃣ 환경변수 파일 생성 (.env)
      - name: Create .env file
        run: |
          cat <<EOF > .env
          MYSQL_HOST=${{ secrets.MYSQL_HOST }}
          MYSQL_DATABASE=${{ secrets.MYSQL_DATABASE }}
          MYSQL_USER=${{ secrets.MYSQL_USER }}
          MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}
          MAIL_HOST=${{ secrets.MAIL_HOST }}
          MAIL_USERNAME=${{ secrets.MAIL_USERNAME }}
          MAIL_PASSWORD=${{ secrets.MAIL_PASSWORD }}
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          EOF

      # 6️⃣ Spring Boot 빌드 (Gradle)
      - name: Build Spring Boot application
        run: |
          export $(grep -v '^#' .env | xargs)
          ./gradlew clean build --no-daemon --stacktrace

      # 7️⃣ Docker 이미지 빌드 (캐시 활용)
      - name: Build Docker Compose with Cache
        run: |
          docker-compose build --pull=never

      # 8️⃣ Docker 이미지 및 구성 파일을 원격 서버로 전송
      - name: Transfer Docker Compose Files
        uses: appleboy/scp-action@v0.1.6
        with:
          host: ${{ secrets.VM_HOST }}
          username: ${{ secrets.VM_USER }}
          key: ${{ secrets.VM_SSH_PRIVATE_KEY }}
          source: "docker-compose.yml, Dockerfile, .env"
          target: "~/app/"

      - name: Save & Transfer Docker Image
        run: |
          docker save spring-boot-app:${{ github.sha }} | gzip > spring-boot-app.tar.gz

      - name: Upload Docker Image to Oracle Cloud
        uses: appleboy/scp-action@v0.1.6
        with:
          host: ${{ secrets.VM_HOST }}
          username: ${{ secrets.VM_USER }}
          key: ${{ secrets.VM_SSH_PRIVATE_KEY }}
          source: "spring-boot-app.tar.gz"
          target: "~/docker-images/"

      # 9️⃣ 원격 서버에서 Docker Compose 실행
      - name: Deploy Docker Compose
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.VM_HOST }}
          username: ${{ secrets.VM_USER }}
          key: ${{ secrets.VM_SSH_PRIVATE_KEY }}
          timeout: 200ms
          script: |
            echo "🚀 배포 시작..."
            cd ~/app

            # 기존 컨테이너 정리
            sudo docker-compose down --remove-orphans || true
            sudo docker stop $(sudo docker ps -aq) || true
            sudo docker rm -f $(sudo docker ps -aq) || true
            sudo docker network prune -f || true

            # 기존 Docker 이미지 삭제
            sudo docker rmi -f $(sudo docker images -q) || true

            # 새로운 Docker 이미지 로드
            gunzip -c ~/docker-images/spring-boot-app.tar.gz | docker load

            # Docker Compose 실행
            sudo docker-compose --env-file .env up -d --build
