#version: "3.8"
#
#services:
#  app:
#    image: spring-boot-app:latest # Spring Boot Docker 이미지
#    container_name: spring-boot-app
#    build:
#      context: .
#      dockerfile: Dockerfile
#    ports:
#      - "8080:8080" # 호스트 8080 -> 컨테이너 8080
#    environment:
#      SPRING_DATASOURCE_URL: jdbc:mysql://${MYSQL_HOST}:3306/${MYSQL_DATABASE}
#      SPRING_DATASOURCE_USERNAME: ${MYSQL_USER}
#      SPRING_DATASOURCE_PASSWORD: ${MYSQL_PASSWORD}
#      MAIL_HOST: ${MAIL_HOST}
#      MAIL_USERNAME: ${MAIL_USERNAME}
#      MAIL_PASSWORD: ${MAIL_PASSWORD}
#      JWT_SECRET: ${JWT_SECRET}
#    depends_on:
#      db:
#        condition: service_healthy
#    restart: always
#
#  db:
#    image: mysql:8.0 # MySQL 이미지
#    container_name: mysql-db
#    restart: always
#    environment:
#      MYSQL_ROOT_PASSWORD: ${MYSQL_PASSWORD}
#      MYSQL_DATABASE: ${MYSQL_DATABASE}
#      MYSQL_USER: ${MYSQL_USER}
#      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
#    ports:
#      - "3306:3306" # 호스트 3306 -> 컨테이너 3306
#    volumes:
#      - mysql-data:/var/lib/mysql
#
#volumes:
#  mysql-data: # MySQL 데이터를 영구 저장

version: "3.8"

services:
  db:
    image: mysql:8.0  # MySQL 최신 버전
    container_name: mysql-db
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    ports:
      - "3306:3306"
    volumes:
      - mysql-data:/var/lib/mysql
    healthcheck:  # ✅ MySQL이 정상적으로 실행되었는지 확인
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      retries: 5
      timeout: 5s

  app:
    image: spring-boot-app:latest  # Spring Boot Docker 이미지
    container_name: spring-boot-app
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://${MYSQL_HOST}:3306/${MYSQL_DATABASE}
      SPRING_DATASOURCE_USERNAME: ${MYSQL_USER}
      SPRING_DATASOURCE_PASSWORD: ${MYSQL_PASSWORD}
      MAIL_HOST: ${MAIL_HOST}
      MAIL_USERNAME: ${MAIL_USERNAME}
      MAIL_PASSWORD: ${MAIL_PASSWORD}
      JWT_SECRET: ${JWT_SECRET}
    depends_on:
      db:
        condition: service_healthy  # ✅ MySQL이 준비된 후에만 Spring Boot 실행
    restart: always  # ✅ 충돌 시 자동 재시작
    healthcheck:  # ✅ Spring Boot가 정상 실행되었는지 확인
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 10s
      retries: 5
      timeout: 5s

volumes:
  mysql-data:  # ✅ MySQL 데이터를 영구 저장
